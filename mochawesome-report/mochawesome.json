{
  "stats": {
    "suites": 6,
    "tests": 20,
    "passes": 20,
    "pending": 0,
    "failures": 0,
    "start": "2019-03-30T17:30:04.238Z",
    "end": "2019-03-30T17:30:06.503Z",
    "duration": 2265,
    "testsRegistered": 20,
    "passPercent": 100,
    "pendingPercent": 0,
    "other": 0,
    "hasOther": false,
    "skipped": 0,
    "hasSkipped": false,
    "passPercentClass": "success",
    "pendingPercentClass": "danger"
  },
  "suites": {
    "uuid": "798942b4-87d7-420a-8c3e-4869d5740836",
    "title": "",
    "fullFile": "",
    "file": "",
    "beforeHooks": [
      {
        "title": "\"before all\" hook",
        "fullTitle": "\"before all\" hook",
        "timedOut": false,
        "duration": 20,
        "pass": false,
        "fail": false,
        "pending": false,
        "code": "// s.o. Callback bei app.listen()\nserver.on('testServerStarted', () => done());",
        "err": {},
        "isRoot": true,
        "uuid": "5f6304f8-321c-4a95-8ba8-c6827d69f29c",
        "isHook": true,
        "skipped": false
      }
    ],
    "afterHooks": [],
    "tests": [],
    "suites": [
      {
        "uuid": "aa08a8c3-c9de-402c-885e-586b4e1b810d",
        "title": "GET /buecher",
        "fullFile": "C:\\Users\\Vincent\\Desktop\\IdeaProjects\\Buch_Abgabe1\\dist\\test\\buch\\rest\\index.spec.js",
        "file": "\\dist\\test\\buch\\rest\\index.spec.js",
        "beforeHooks": [],
        "afterHooks": [],
        "tests": [
          {
            "title": "Alle Buecher",
            "fullTitle": "GET /buecher Alle Buecher",
            "timedOut": false,
            "duration": 273,
            "state": "passed",
            "speed": "slow",
            "pass": true,
            "fail": false,
            "pending": false,
            "code": "request(server)\n    .get(path)\n    // Assertion = Expectation\n    .expect(shared_1.HttpStatus.OK)\n    .expect('Content-Type', /json/)\n    // Promise\n    .end((error, response) => {\n    if (error) {\n        return done(error);\n    }\n    // response.body ist ein JSON-Array mit mind. 1 JSON-Objekt\n    response.body.should.be.not.empty;\n    done();\n});",
            "err": {},
            "isRoot": false,
            "uuid": "46539a48-4174-4932-9d45-9ccd1d188a24",
            "isHook": false,
            "skipped": false
          }
        ],
        "suites": [],
        "passes": [
          "46539a48-4174-4932-9d45-9ccd1d188a24"
        ],
        "failures": [],
        "pending": [],
        "skipped": [],
        "duration": 273,
        "root": false,
        "rootEmpty": false,
        "_timeout": 5000
      },
      {
        "uuid": "a7a5f5eb-4709-4737-b4ce-471dee36d74f",
        "title": "GET /buecher/:id",
        "fullFile": "C:\\Users\\Vincent\\Desktop\\IdeaProjects\\Buch_Abgabe1\\dist\\test\\buch\\rest\\index.spec.js",
        "file": "\\dist\\test\\buch\\rest\\index.spec.js",
        "beforeHooks": [],
        "afterHooks": [],
        "tests": [
          {
            "title": "Buch zu vorhandener ID",
            "fullTitle": "GET /buecher/:id Buch zu vorhandener ID",
            "timedOut": false,
            "duration": 31,
            "state": "passed",
            "speed": "fast",
            "pass": true,
            "fail": false,
            "pending": false,
            "code": "request(server)\n    .get(`${path}/${idGetVorhanden}`)\n    .expect(shared_1.HttpStatus.OK)\n    .expect('Content-Type', /json/)\n    .end((error, response) => {\n    if (error) {\n        return done(error);\n    }\n    // response.body enthaelt ein JSON-Objekt mit Atom-Links\n    const selfLink = response.body.links[0].href;\n    // http://chaijs.com/plugins/chai-string\n    selfLink.should.endWith(idGetVorhanden);\n    done();\n});",
            "err": {},
            "isRoot": false,
            "uuid": "cbf7bd44-9956-4012-bfbd-314e0469faca",
            "isHook": false,
            "skipped": false
          },
          {
            "title": "Kein Buch zu nicht-vorhandener ID",
            "fullTitle": "GET /buecher/:id Kein Buch zu nicht-vorhandener ID",
            "timedOut": false,
            "duration": 22,
            "state": "passed",
            "speed": "fast",
            "pass": true,
            "fail": false,
            "pending": false,
            "code": "request(server)\n    .get(`${path}/${idNichtVorhanden}`)\n    .expect(shared_1.HttpStatus.NOT_FOUND)\n    .end((error, response) => {\n    if (error) {\n        return done(error);\n    }\n    response.body.should.be.empty;\n    done();\n});",
            "err": {},
            "isRoot": false,
            "uuid": "bbc6fe62-4f9d-4a8e-a11f-f1a96ee83ec0",
            "isHook": false,
            "skipped": false
          }
        ],
        "suites": [],
        "passes": [
          "cbf7bd44-9956-4012-bfbd-314e0469faca",
          "bbc6fe62-4f9d-4a8e-a11f-f1a96ee83ec0"
        ],
        "failures": [],
        "pending": [],
        "skipped": [],
        "duration": 53,
        "root": false,
        "rootEmpty": false,
        "_timeout": 5000
      },
      {
        "uuid": "de684725-eb34-4479-8f73-820d1b1eb696",
        "title": "GET /buecher?...",
        "fullFile": "C:\\Users\\Vincent\\Desktop\\IdeaProjects\\Buch_Abgabe1\\dist\\test\\buch\\rest\\index.spec.js",
        "file": "\\dist\\test\\buch\\rest\\index.spec.js",
        "beforeHooks": [],
        "afterHooks": [],
        "tests": [
          {
            "title": "Buecher mit einem Titel, der ein \"a\" enthaelt",
            "fullTitle": "GET /buecher?... Buecher mit einem Titel, der ein \"a\" enthaelt",
            "timedOut": false,
            "duration": 38,
            "state": "passed",
            "speed": "medium",
            "pass": true,
            "fail": false,
            "pending": false,
            "code": "request(server)\n    .get(`${path}?titel=a`)\n    .expect(shared_1.HttpStatus.OK)\n    .expect('Content-Type', /json/)\n    .end((error, response) => {\n    if (error) {\n        return done(error);\n    }\n    const { body } = response;\n    // response.body ist ein JSON-Array mit mind. 1 JSON-Objekt\n    body.should.be.not.empty;\n    // Jedes Buch hat einen Titel mit dem Teilstring 'a'\n    body.map((buch) => buch.titel).forEach((titel) => titel.should.contain('a'));\n    done();\n});",
            "err": {},
            "isRoot": false,
            "uuid": "9c19b8d1-6253-4599-a653-2e48b3b5ec5f",
            "isHook": false,
            "skipped": false
          },
          {
            "title": "Keine Buecher mit einem Titel, der \"XX\" enthaelt",
            "fullTitle": "GET /buecher?... Keine Buecher mit einem Titel, der \"XX\" enthaelt",
            "timedOut": false,
            "duration": 17,
            "state": "passed",
            "speed": "fast",
            "pass": true,
            "fail": false,
            "pending": false,
            "code": "request(server)\n    .get(`${path}?titel=XX`)\n    .expect(shared_1.HttpStatus.NOT_FOUND)\n    .end((error, response) => {\n    if (error) {\n        return done(error);\n    }\n    response.body.should.be.empty;\n    done();\n});",
            "err": {},
            "isRoot": false,
            "uuid": "d383159b-d522-4476-8bd7-33332b10ca52",
            "isHook": false,
            "skipped": false
          },
          {
            "title": "Mind. 1 Buch mit dem Schlagwort \"javascript\"",
            "fullTitle": "GET /buecher?... Mind. 1 Buch mit dem Schlagwort \"javascript\"",
            "timedOut": false,
            "duration": 29,
            "state": "passed",
            "speed": "fast",
            "pass": true,
            "fail": false,
            "pending": false,
            "code": "const schlagwort = 'javascript';\nrequest(server)\n    .get(`${path}?${schlagwort}=true`)\n    .expect(shared_1.HttpStatus.OK)\n    .expect('Content-Type', /json/)\n    .end((error, response) => {\n    if (error) {\n        return done(error);\n    }\n    const { body } = response;\n    // response.body ist ein JSON-Array mit mind. 1 JSON-Objekt\n    body.should.be.not.empty;\n    // Jedes Buch hat im Array der Schlagwoerter \"javascript\"\n    body.map((buch) => buch.schlagwoerter).forEach((s) => s.should.contain(`${schlagwort.toUpperCase()}`));\n    done();\n});",
            "err": {},
            "isRoot": false,
            "uuid": "9d3d3939-27aa-4205-9df4-3cbd00753e0b",
            "isHook": false,
            "skipped": false
          },
          {
            "title": "Keine Buecher mit dem Schlagwort \"csharp\"",
            "fullTitle": "GET /buecher?... Keine Buecher mit dem Schlagwort \"csharp\"",
            "timedOut": false,
            "duration": 12,
            "state": "passed",
            "speed": "fast",
            "pass": true,
            "fail": false,
            "pending": false,
            "code": "request(server)\n    .get(`${path}?csharp=true`)\n    .expect(shared_1.HttpStatus.NOT_FOUND)\n    .end((error, response) => {\n    if (error) {\n        return done(error);\n    }\n    response.body.should.be.empty;\n    done();\n});",
            "err": {},
            "isRoot": false,
            "uuid": "92fb3ac5-9c74-4d57-802a-1e9ad30ab163",
            "isHook": false,
            "skipped": false
          }
        ],
        "suites": [],
        "passes": [
          "9c19b8d1-6253-4599-a653-2e48b3b5ec5f",
          "d383159b-d522-4476-8bd7-33332b10ca52",
          "9d3d3939-27aa-4205-9df4-3cbd00753e0b",
          "92fb3ac5-9c74-4d57-802a-1e9ad30ab163"
        ],
        "failures": [],
        "pending": [],
        "skipped": [],
        "duration": 96,
        "root": false,
        "rootEmpty": false,
        "_timeout": 5000
      },
      {
        "uuid": "65cd3372-f48d-4c46-97ab-4c9bd204475c",
        "title": "POST /buecher",
        "fullFile": "C:\\Users\\Vincent\\Desktop\\IdeaProjects\\Buch_Abgabe1\\dist\\test\\buch\\rest\\index.spec.js",
        "file": "\\dist\\test\\buch\\rest\\index.spec.js",
        "beforeHooks": [
          {
            "title": "\"before all\" hook",
            "fullTitle": "POST /buecher \"before all\" hook",
            "timedOut": false,
            "duration": 412,
            "pass": false,
            "fail": false,
            "pending": false,
            "code": "request(server)\n    .post(`${loginPath}`)\n    .set('Content-type', 'application/x-www-form-urlencoded')\n    .send(loginDaten)\n    .expect(shared_1.HttpStatus.OK)\n    // Promise\n    .end((error, response) => {\n    if (error) {\n        return done(error);\n    }\n    token = response.body.token; // eslint-disable-line prefer-destructuring\n    token.should.be.not.empty;\n    // synchroner Before-Hook\n    done();\n});",
            "err": {},
            "isRoot": false,
            "uuid": "f3da2db1-bbca-42f7-a454-3bc9540e4355",
            "isHook": true,
            "skipped": false
          }
        ],
        "afterHooks": [],
        "tests": [
          {
            "title": "Neues Buch",
            "fullTitle": "POST /buecher Neues Buch",
            "timedOut": false,
            "duration": 103,
            "state": "passed",
            "speed": "slow",
            "pass": true,
            "fail": false,
            "pending": false,
            "code": "request(server)\n    .post(path)\n    .set('Authorization', `Bearer ${token}`)\n    .send(neuesBuch)\n    .expect(shared_1.HttpStatus.CREATED)\n    .end((error, response) => {\n    if (error) {\n        return done(error);\n    }\n    const { location } = response.header;\n    location.should.be.not.empty;\n    // UUID: Muster von HEX-Ziffern\n    const indexLastSlash = location.lastIndexOf('/');\n    const idStr = location.substring(indexLastSlash + 1);\n    idStr.should.match(\n    /* eslint-disable-next-line max-len */\n    /[\\dA-Fa-f]{8}-[\\dA-Fa-f]{4}-[\\dA-Fa-f]{4}-[\\dA-Fa-f]{4}-[\\dA-Fa-f]{12}/);\n    done();\n});",
            "err": {},
            "isRoot": false,
            "uuid": "92a8d1ea-2249-467c-a9e3-f4890d9b388d",
            "isHook": false,
            "skipped": false
          },
          {
            "title": "Neues Buch mit ungueltigen Daten",
            "fullTitle": "POST /buecher Neues Buch mit ungueltigen Daten",
            "timedOut": false,
            "duration": 36,
            "state": "passed",
            "speed": "fast",
            "pass": true,
            "fail": false,
            "pending": false,
            "code": "request(server)\n    .post(path)\n    .set('Authorization', `Bearer ${token}`)\n    .send(neuesBuchInvalid)\n    .expect(shared_1.HttpStatus.BAD_REQUEST)\n    .end((error, response) => {\n    if (error) {\n        return done(error);\n    }\n    const { body } = response;\n    body.art.should.be.equal('Die Art eines Buches muss KINDLE oder DRUCKAUSGABE sein.');\n    body.rating.should.endWith('ist keine gueltige Bewertung.');\n    body.verlag.should.be.equal('Der Verlag eines Buches muss IWI_VERLAG oder HSKA_VERLAG sein.');\n    body.isbn.should.endWith('ist keine gueltige ISBN-Nummer.');\n    done();\n});",
            "err": {},
            "isRoot": false,
            "uuid": "1b482106-762c-4cf0-bd73-dcc23ddbbcc3",
            "isHook": false,
            "skipped": false
          },
          {
            "title": "Neues Buch, aber der Titel existiert bereits",
            "fullTitle": "POST /buecher Neues Buch, aber der Titel existiert bereits",
            "timedOut": false,
            "duration": 42,
            "state": "passed",
            "speed": "medium",
            "pass": true,
            "fail": false,
            "pending": false,
            "code": "request(server)\n    .post(path)\n    .set('Authorization', `Bearer ${token}`)\n    .send(neuesBuchTitelExistiert)\n    .expect(shared_1.HttpStatus.BAD_REQUEST)\n    .end((error, response) => {\n    if (error) {\n        return done(error);\n    }\n    response.text.should.contain('Titel');\n    done();\n});",
            "err": {},
            "isRoot": false,
            "uuid": "287dc6a2-b9bb-4232-b313-47e3463c05f5",
            "isHook": false,
            "skipped": false
          },
          {
            "title": "Neues Buch, aber ohne Token",
            "fullTitle": "POST /buecher Neues Buch, aber ohne Token",
            "timedOut": false,
            "duration": 10,
            "state": "passed",
            "speed": "fast",
            "pass": true,
            "fail": false,
            "pending": false,
            "code": "request(server)\n    .post(path)\n    .send(neuesBuch)\n    .expect(shared_1.HttpStatus.UNAUTHORIZED)\n    .end((error, response) => {\n    if (error) {\n        return done(error);\n    }\n    response.body.should.be.empty;\n    done();\n});",
            "err": {},
            "isRoot": false,
            "uuid": "dee8d132-d7c4-406b-b8b7-f60706717941",
            "isHook": false,
            "skipped": false
          },
          {
            "title": "Neues Buch, aber mit falschem Token",
            "fullTitle": "POST /buecher Neues Buch, aber mit falschem Token",
            "timedOut": false,
            "duration": 8,
            "state": "passed",
            "speed": "fast",
            "pass": true,
            "fail": false,
            "pending": false,
            "code": "request(server)\n    .post(path)\n    .set('Authorization', 'Bearer x')\n    .send(neuesBuch)\n    .expect(shared_1.HttpStatus.UNAUTHORIZED)\n    .end((error, response) => {\n    if (error) {\n        return done(error);\n    }\n    response.body.should.be.empty;\n    done();\n});",
            "err": {},
            "isRoot": false,
            "uuid": "281503eb-13f8-4007-8240-7c4030c5ae8c",
            "isHook": false,
            "skipped": false
          }
        ],
        "suites": [],
        "passes": [
          "92a8d1ea-2249-467c-a9e3-f4890d9b388d",
          "1b482106-762c-4cf0-bd73-dcc23ddbbcc3",
          "287dc6a2-b9bb-4232-b313-47e3463c05f5",
          "dee8d132-d7c4-406b-b8b7-f60706717941",
          "281503eb-13f8-4007-8240-7c4030c5ae8c"
        ],
        "failures": [],
        "pending": [],
        "skipped": [],
        "duration": 199,
        "root": false,
        "rootEmpty": false,
        "_timeout": 5000
      },
      {
        "uuid": "eedf950c-3a69-44e9-8600-79aaebeb5c5b",
        "title": "PUT /buecher/:id",
        "fullFile": "C:\\Users\\Vincent\\Desktop\\IdeaProjects\\Buch_Abgabe1\\dist\\test\\buch\\rest\\index.spec.js",
        "file": "\\dist\\test\\buch\\rest\\index.spec.js",
        "beforeHooks": [
          {
            "title": "\"before all\" hook",
            "fullTitle": "PUT /buecher/:id \"before all\" hook",
            "timedOut": false,
            "duration": 367,
            "pass": false,
            "fail": false,
            "pending": false,
            "code": "request(server)\n    .post(`${loginPath}`)\n    .set('Content-type', 'application/x-www-form-urlencoded')\n    .send(loginDaten)\n    .expect(shared_1.HttpStatus.OK)\n    .end((error, response) => {\n    if (error) {\n        return done(error);\n    }\n    token = response.body.token; // eslint-disable-line prefer-destructuring\n    token.should.be.not.empty;\n    done();\n});",
            "err": {},
            "isRoot": false,
            "uuid": "d4fdf6c2-73e9-4294-b08c-0825e536f064",
            "isHook": true,
            "skipped": false
          }
        ],
        "afterHooks": [],
        "tests": [
          {
            "title": "Vorhandenes Buch aendern",
            "fullTitle": "PUT /buecher/:id Vorhandenes Buch aendern",
            "timedOut": false,
            "duration": 45,
            "state": "passed",
            "speed": "medium",
            "pass": true,
            "fail": false,
            "pending": false,
            "code": "request(server)\n    .put(`${path}/${idPutVorhanden}`)\n    .set('Authorization', `Bearer ${token}`)\n    .set('If-Match', '0')\n    .send(geaendertesBuch)\n    .expect(shared_1.HttpStatus.NO_CONTENT)\n    .end((error, response) => {\n    if (error) {\n        return done(error);\n    }\n    response.body.should.be.empty;\n    done();\n});",
            "err": {},
            "isRoot": false,
            "uuid": "426a74c3-23e8-4fb0-a73e-84114d1709f2",
            "isHook": false,
            "skipped": false
          },
          {
            "title": "Nicht-vorhandenes Buch aendern",
            "fullTitle": "PUT /buecher/:id Nicht-vorhandenes Buch aendern",
            "timedOut": false,
            "duration": 67,
            "state": "passed",
            "speed": "medium",
            "pass": true,
            "fail": false,
            "pending": false,
            "code": "request(server)\n    .put(`${path}/${idPutNichtVorhanden}`)\n    .set('Authorization', `Bearer ${token}`)\n    .set('If-Match', '0')\n    .send(geaendertesBuchIdNichtVorhanden)\n    .expect(shared_1.HttpStatus.PRECONDITION_FAILED)\n    .end(error => {\n    if (error) {\n        return done(error);\n    }\n    done();\n});",
            "err": {},
            "isRoot": false,
            "uuid": "5de5c45d-e77e-441c-ae0d-93f511b62c61",
            "isHook": false,
            "skipped": false
          },
          {
            "title": "Vorhandenes Buch aendern, aber mit ungueltigen Daten",
            "fullTitle": "PUT /buecher/:id Vorhandenes Buch aendern, aber mit ungueltigen Daten",
            "timedOut": false,
            "duration": 11,
            "state": "passed",
            "speed": "fast",
            "pass": true,
            "fail": false,
            "pending": false,
            "code": "request(server)\n    .put(`${path}/${idPutVorhanden}`)\n    .set('Authorization', `Bearer ${token}`)\n    .set('If-Match', '0')\n    .send(geaendertesBuchInvalid)\n    .expect(shared_1.HttpStatus.BAD_REQUEST)\n    .end((error, response) => {\n    if (error) {\n        return done(error);\n    }\n    const { body } = response;\n    body.art.should.be.equal('Die Art eines Buches muss KINDLE oder DRUCKAUSGABE sein.');\n    body.rating.should.endWith('ist keine gueltige Bewertung.');\n    body.verlag.should.be.equal('Der Verlag eines Buches muss IWI_VERLAG oder HSKA_VERLAG sein.');\n    body.isbn.should.endWith('ist keine gueltige ISBN-Nummer.');\n    done();\n});",
            "err": {},
            "isRoot": false,
            "uuid": "3564d5d0-68b7-43b4-a592-e7814b8cb8e1",
            "isHook": false,
            "skipped": false
          },
          {
            "title": "Vorhandenes Buch aendern, aber ohne Token",
            "fullTitle": "PUT /buecher/:id Vorhandenes Buch aendern, aber ohne Token",
            "timedOut": false,
            "duration": 14,
            "state": "passed",
            "speed": "fast",
            "pass": true,
            "fail": false,
            "pending": false,
            "code": "request(server)\n    .put(`${path}/${idPutVorhanden}`)\n    .set('If-Match', '0')\n    .send(geaendertesBuch)\n    .expect(shared_1.HttpStatus.UNAUTHORIZED)\n    .end((error, response) => {\n    if (error) {\n        return done(error);\n    }\n    response.body.should.be.empty;\n    done();\n});",
            "err": {},
            "isRoot": false,
            "uuid": "14b08bcd-c55e-42b4-9c08-70e5c756d635",
            "isHook": false,
            "skipped": false
          },
          {
            "title": "Vorhandenes Buch aendern, aber mit falschem Token",
            "fullTitle": "PUT /buecher/:id Vorhandenes Buch aendern, aber mit falschem Token",
            "timedOut": false,
            "duration": 13,
            "state": "passed",
            "speed": "fast",
            "pass": true,
            "fail": false,
            "pending": false,
            "code": "request(server)\n    .put(`${path}/${idPutVorhanden}`)\n    .set('Authorization', 'Bearer x')\n    .set('If-Match', '0')\n    .send(geaendertesBuch)\n    .expect(shared_1.HttpStatus.UNAUTHORIZED)\n    .end((error, response) => {\n    if (error) {\n        return done(error);\n    }\n    response.body.should.be.empty;\n    done();\n});",
            "err": {},
            "isRoot": false,
            "uuid": "f38cb472-92cd-480a-8ea1-b41afd7248f4",
            "isHook": false,
            "skipped": false
          }
        ],
        "suites": [],
        "passes": [
          "426a74c3-23e8-4fb0-a73e-84114d1709f2",
          "5de5c45d-e77e-441c-ae0d-93f511b62c61",
          "3564d5d0-68b7-43b4-a592-e7814b8cb8e1",
          "14b08bcd-c55e-42b4-9c08-70e5c756d635",
          "f38cb472-92cd-480a-8ea1-b41afd7248f4"
        ],
        "failures": [],
        "pending": [],
        "skipped": [],
        "duration": 150,
        "root": false,
        "rootEmpty": false,
        "_timeout": 5000
      },
      {
        "uuid": "f6c40e77-5aba-4332-ab8c-1a67eb638d18",
        "title": "DELETE /buecher",
        "fullFile": "C:\\Users\\Vincent\\Desktop\\IdeaProjects\\Buch_Abgabe1\\dist\\test\\buch\\rest\\index.spec.js",
        "file": "\\dist\\test\\buch\\rest\\index.spec.js",
        "beforeHooks": [
          {
            "title": "\"before all\" hook",
            "fullTitle": "DELETE /buecher \"before all\" hook",
            "timedOut": false,
            "duration": 371,
            "pass": false,
            "fail": false,
            "pending": false,
            "code": "request(server)\n    .post(`${loginPath}`)\n    .set('Content-type', 'application/x-www-form-urlencoded')\n    .send(loginDaten)\n    .expect(shared_1.HttpStatus.OK)\n    .end((error, response) => {\n    if (error) {\n        return done(error);\n    }\n    token = response.body.token; // eslint-disable-line prefer-destructuring\n    token.should.be.not.empty;\n    done();\n});",
            "err": {},
            "isRoot": false,
            "uuid": "e84c825f-f971-45ac-864f-a97c5e3db12d",
            "isHook": true,
            "skipped": false
          }
        ],
        "afterHooks": [],
        "tests": [
          {
            "title": "Vorhandenes Buch loeschen",
            "fullTitle": "DELETE /buecher Vorhandenes Buch loeschen",
            "timedOut": false,
            "duration": 13,
            "state": "passed",
            "speed": "fast",
            "pass": true,
            "fail": false,
            "pending": false,
            "code": "request(server)\n    .delete(`${path}/${idDeleteVorhanden}`)\n    .set('Authorization', `Bearer ${token}`)\n    .expect(shared_1.HttpStatus.NO_CONTENT)\n    .end((error, response) => {\n    if (error) {\n        return done(error);\n    }\n    response.body.should.be.empty;\n    done();\n});",
            "err": {},
            "isRoot": false,
            "uuid": "c3fb14ba-8bf6-4806-9b47-04fdaaf7a6c9",
            "isHook": false,
            "skipped": false
          },
          {
            "title": "Buch loeschen, aber ohne Token",
            "fullTitle": "DELETE /buecher Buch loeschen, aber ohne Token",
            "timedOut": false,
            "duration": 15,
            "state": "passed",
            "speed": "fast",
            "pass": true,
            "fail": false,
            "pending": false,
            "code": "request(server)\n    .delete(`${path}/${idDeleteVorhanden}`)\n    .expect(shared_1.HttpStatus.UNAUTHORIZED)\n    .end((error, response) => {\n    if (error) {\n        return done(error);\n    }\n    response.body.should.be.empty;\n    done();\n});",
            "err": {},
            "isRoot": false,
            "uuid": "8739fcaa-b98e-4a7e-ae89-bc9a75186402",
            "isHook": false,
            "skipped": false
          },
          {
            "title": "Buch loeschen, aber mit falschem Token",
            "fullTitle": "DELETE /buecher Buch loeschen, aber mit falschem Token",
            "timedOut": false,
            "duration": 12,
            "state": "passed",
            "speed": "fast",
            "pass": true,
            "fail": false,
            "pending": false,
            "code": "request(server)\n    .delete(`${path}/${idDeleteVorhanden}`)\n    .set('Authorization', 'Bearer x')\n    .expect(shared_1.HttpStatus.UNAUTHORIZED)\n    .end((error, response) => {\n    if (error) {\n        return done(error);\n    }\n    response.body.should.be.empty;\n    done();\n});",
            "err": {},
            "isRoot": false,
            "uuid": "ffa841de-2df1-46e8-84e4-65701b7675c1",
            "isHook": false,
            "skipped": false
          }
        ],
        "suites": [],
        "passes": [
          "c3fb14ba-8bf6-4806-9b47-04fdaaf7a6c9",
          "8739fcaa-b98e-4a7e-ae89-bc9a75186402",
          "ffa841de-2df1-46e8-84e4-65701b7675c1"
        ],
        "failures": [],
        "pending": [],
        "skipped": [],
        "duration": 40,
        "root": false,
        "rootEmpty": false,
        "_timeout": 5000
      }
    ],
    "passes": [],
    "failures": [],
    "pending": [],
    "skipped": [],
    "duration": 0,
    "root": true,
    "rootEmpty": true,
    "_timeout": 5000
  },
  "copyrightYear": 2019
}